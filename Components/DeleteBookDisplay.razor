@using System.ComponentModel.DataAnnotations
@inject LibraryDBContext connection


@if (ShowDialog)
{

    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <EditForm Model="@input" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="num">Number of Books: </label>
                            <InputNumber id="num" class="form-control" @bind-Value="@input.amount"></InputNumber>
                        </div>

                        <button type="submit" class="btn btn-danger">Delete Book</button>
                        <a class="btn btn-outline-primary" @onclick="@Close">Close</a>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public numInput input = new numInput();
    public List<Book> bookList;
    public bool ShowDialog { get; set; }


    [Parameter]
    public Action CloseEventCallback { get; set; }

    public class numInput
    {
        [Required]
        [Range(1, 100, ErrorMessage = "Must have enough books to delete")]
        public int amount { get; set; }

        public Book bookSearch = new Book();
    }

    public void Show()
    {
        ShowDialog = true;
        StateHasChanged();
    }

    public void Close()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    // Submit button
    void HandleValidSubmit()
    {
        deleteBook();
        ShowDialog = false;
        CloseEventCallback.Invoke();
        StateHasChanged();
    }

    // deletes the book
    void deleteBook()
    {
        setBookList();
        foreach (var b in bookList)
        {
            b.Title = input.bookSearch.Title;
            b.Author = input.bookSearch.Author;
            b.ISBN = input.bookSearch.ISBN;
            b.Status = input.bookSearch.Status;
            connection.Entry(b).State = Microsoft.EntityFrameworkCore.EntityState.Deleted;
        }

        connection.SaveChanges();
    }

    public void setBook(BookCount _book)
    {
        input.bookSearch.Title = _book.Title;
        input.bookSearch.Author = _book.Author;
        input.bookSearch.ISBN = _book.ISBN;
        input.bookSearch.Status = _book.Status;
        setBookList();
        StateHasChanged();
    }

    private void setBookList()
    {
        var result = from b in connection.Books
                     select b;

        result = result.Where(b => b.Title.Contains(input.bookSearch.Title));
        result = result.Where(b => b.Author.Contains(input.bookSearch.Author));
        result = result.Where(b => b.ISBN.Contains(input.bookSearch.ISBN));
        result = result.Where(b => b.Status.Contains(input.bookSearch.Status));

        result = result.Take(input.amount);

        bookList = result.ToList();
    }

}