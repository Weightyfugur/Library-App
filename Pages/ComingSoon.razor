@page "/comingsoon"
@inject LibraryDBContext connection


<h3 style="text-align:center">Coming soon to the Library!</h3>
<br />

<input type="text" class="form-control" @oninput="changeSearch">
<EditForm Model="userSort">
    <InputRadioGroup @bind-Value="@userSort.filterField">
        <table class="table">
            <tr>
                @foreach (var bookSort in Enum.GetValues(typeof(newBookSearch)))
                {
                    <td>
                        <InputRadio Value="bookSort" @onclick="@(e => changeFilter(bookSort))" />
                        @bookSort
                    </td>
                }
            </tr>
        </table>
    </InputRadioGroup>
</EditForm>


<table class="table">
    <thead>
        <tr>
            <th scope="col" @onclick="@(e => changeSort("Title"))">@columnNames[0]</th>
            <th scope="col" @onclick="@(e => changeSort("Author"))">@columnNames[1]</th>
            <th scope="col" @onclick="@(e => changeSort("ISBN"))">@columnNames[2]</th>
            <th scope="col" @onclick="@(e => changeSort("Status"))">@columnNames[3]</th>
            <th scope="col" @onclick="@(e => changeSort("Number of Copies"))">@columnNames[4]</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var book in bookResult)
        {
        <tr>
            <td>@book.Title</td>
            <td>@book.Author</td>
            <td>@book.ISBN</td>
            <td>@book.Status</td>
            <td>@book.NumCopies</td>
        </tr>
        }
    </tbody>
</table>



@code
{
    List<string> columnNames = new List<string> { "Title", "Author", "ISBN", "Status", "Number of Copies" };
    List<Book> bookResult = new List<Book>();
    BookSort userSort = new BookSort();


    // On webpage load
    protected override async Task OnInitializedAsync()
    {

        var tempBookResult = from b in connection.Books
                             select b;
        tempBookResult = tempBookResult.Where(b => b.Status.Contains("Coming Soon"));
        bookResult = tempBookResult.ToList();
    }

    // When something is typed into the search box update the search class
    void changeSearch(ChangeEventArgs s)
    {
        userSort.searchField = s.Value.ToString();
        search();
    }

    // When radio button changes, update the search class
    void changeFilter(object s)
    {
        userSort.filterField = (newBookSearch)(int)s;
        search();
    }

    // When sort changes, update the search class
    void changeSort(string s)
    {
        // reset all column names
        columnNames[0] = "Title";
        columnNames[1] = "Author";
        columnNames[2] = "ISBN";
        columnNames[3] = "Status";
        columnNames[4] = "Number of Copies";
        columnNames[columnNames.IndexOf(s)] = s + " ↓";

        userSort.sortField = s;
        search();
    }

    // search function
    void search()
    {
        var tempBookResult = from b in connection.Books
                             select b;

        // get the results that only contain X in the field X
        switch (userSort.filterField)
        {
            case newBookSearch.Title:
                tempBookResult = tempBookResult.Where(b => b.Title.Contains(userSort.searchField));
                break;

            case newBookSearch.Author:
                tempBookResult = tempBookResult.Where(b => b.Author.Contains(userSort.searchField));
                break;

            case newBookSearch.ISBN:
                tempBookResult = tempBookResult.Where(b => b.ISBN.Contains(userSort.searchField));
                break;

            default:
                break;
        }

        // if search field empty,
        if (userSort.searchField == "" || userSort.searchField == null)
        {
            tempBookResult = from b in connection.Books
                             select b;
        }

        // sort results based on the field selected
        switch (userSort.sortField)
        {
            case "Title":
                tempBookResult = tempBookResult.OrderBy(b => b.Title);
                break;

            case "Author":
                tempBookResult = tempBookResult.OrderBy(b => b.Author);
                break;

            case "ISBN":
                tempBookResult = tempBookResult.OrderBy(b => b.ISBN);
                break;

            case "Number of Copies":
                tempBookResult = tempBookResult.OrderBy(b => b.NumCopies);
                break;

            default:
                break;
        }

        tempBookResult = tempBookResult.Where(b => b.Status.Contains("Coming Soon"));
        bookResult = tempBookResult.ToList();
        StateHasChanged();
    }

    class BookSort
    {
        public newBookSearch filterField = newBookSearch.Title;
        public string searchField;
        public string sortField = "Title";
    }

}