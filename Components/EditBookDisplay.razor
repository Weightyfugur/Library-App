@inject LibraryDBContext connection


@if (ShowDialog)
{

    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="titleLabel">Edit Book</h5>
                    <button type="button" class="close" @onclick="@Close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@bookSearch" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="title">Title: </label>
                            <InputText id="title" class="form-control" @bind-Value="@bookSearch.Title" placeholder="Enter Book Title"></InputText>
                            <ValidationMessage For="@(() => bookSearch.Title)" />
                        </div>
                        <div class="form-group">
                            <label for="author">Author: </label>
                            <InputText id="author" class="form-control" @bind-Value="@bookSearch.Author" placeholder="Enter Author Name"></InputText>
                            <ValidationMessage For="@(() => bookSearch.Author)" />
                        </div>
                        <div class="form-group">
                            <label for="ISBN">ISBN: </label>
                            <InputText id="ISBN" class="form-control" @bind-Value="@bookSearch.ISBN" placeholder="Enter ISBN"></InputText>
                            <ValidationMessage For="@(() => bookSearch.ISBN)" />
                        </div>
                        <div class="form-group">
                            <label for="Status">Status: </label>
                            <InputSelect id="Status" class="form-control" @bind-Value="@bookSearch.Status">
                                <option value="Coming Soon">Coming Soon</option>
                                <option value="Available">Available</option>
                                <option value="Checked Out">Checked Out</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => bookSearch.Status)" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save Book</button>
                        <a class="btn btn-outline-primary" @onclick="@Close">Close</a>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public Book bookSearch { get; set; } = new Book();

    public List<Book> bookList;

    public bool ShowDialog {get; set;}

    [Parameter]
    public Action CloseEventCallback {get; set;}

    public void Show()
    {
        ShowDialog = true;
        StateHasChanged();
    }

    public void Close()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    // Submit button
    void HandleValidSubmit()
    {
        editBook();
        ShowDialog = false;
        CloseEventCallback.Invoke();
        StateHasChanged();
    }

    // changes the data for the book
    void editBook()
    {
        foreach(var b in bookList)
        {
            b.Title = bookSearch.Title;
            b.Author = bookSearch.Author;
            b.ISBN = bookSearch.ISBN;
            b.Status = bookSearch.Status;
            connection.Entry(b).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
        }

        connection.SaveChanges();
    }

    public void setBook(BookCount _book)
    {
        bookSearch.Title = _book.Title;
        bookSearch.Author = _book.Author;
        bookSearch.ISBN = _book.ISBN;
        bookSearch.Status = _book.Status;
        setBookList();
        StateHasChanged();
    }

    private void setBookList()
    {
        var result = from b in connection.Books
                     select b;

        result = result.Where(b => b.Title.Contains(bookSearch.Title));
        result = result.Where(b => b.Author.Contains(bookSearch.Author));
        result = result.Where(b => b.ISBN.Contains(bookSearch.ISBN));
        result = result.Where(b => b.Status.Contains(bookSearch.Status));

        bookList = result.ToList();
    }
}